Senden Sie einem der Programme ein STOP-Signal, danach ein CONT-Signal.
- was beobachten Sie ?
	Nach dem STOP-Signal werden keine weiteren Ausgaben mehr auf der Konsole gezeigt.
	Das CONT-Signal setzt den Prozess fort und die Ausgaben erscheinen wieder.

- welchen Status haben die Prozesse, während sie schlafen (ps).
	(robin)[~] ./aufgabe2.sh
	---------- Process[13158] and Process[13159] started... ----------
	-------------------- SIGSTOP Process[13158] ----------------------
	USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
	robin    13158  0.0  0.0    316     4 pts/1    T+   11:38   0:00 python sleeper.py hello world 1
	-------------------- SIGCONT Process[13158] ----------------------
	USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
	robin    13158  0.0  0.1  24340  6884 pts/1    R+   11:38   0:00 python sleeper.py hello world 1
	---------- Process[13158] and Process[13159] terminated! ---------

	T+ bedeutet: Prozess ist gestoppt und in der Vordergrundgruppe
	R+ bedeutet: Prozess läuft in der Vordergrundgruppe

Senden Sie einem Prozess ein kill-Signal (TERM).
- was beobachten Sie ?
	Der Prozess wird gestoppt und verschwindet aus der Prozessliste von ps

Senden Sie einem Prozess, der Ihnen nicht gehört, ein 'kill -9'.
- was beobachten Sie ?
	Die operation ist nicht erlaubt

	(robin)[~] sudo nano test &
	[1] 12000
	(robin)[~] kill -9 12000
	bash: kill: (12000) - Operation not permitted
	(robin)[~] sudo kill -9 12000
	[1]+  Killed                  sudo nano test

Schreiben Sie ein Programm, das mittels fork 3 Childs erzeugt...
- Was beobachten Sie bezüglich der Reihenfolge der Prozessausführung?
	Die Reihenfolge variiert und hängt nicht mit der Erstellungsreihenfolge zusammen.
